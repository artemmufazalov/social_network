{"version":3,"sources":["socialNetwork/components/Messages/Messages.module.css","socialNetwork/components/Messages/MessageItem.module.css","socialNetwork/components/Messages/Message.js","socialNetwork/components/Messages/Dialog.js","socialNetwork/components/Messages/Messages.js","socialNetwork/components/Messages/MessagesContainer.js"],"names":["module","exports","MessagesParser","props","message","to","className","s","toMeMessage","text","name","from","time","fromMeMessage","Message","messageProps","messageSender","messageTime","messageText","DialogItem","path","id","dialog","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","newMessageBox","newMessageTextArea","Field","component","Textarea","placeholder","rows","validate","required","buttonBox","sendButton","Messages","mainContainer","dialogsContainer","state","messagesPage","dialogsData","map","data","Dialog","key","messagesMainContainer","messagesContainer","messages","m","values","sendNewMessage","newMessageBody","compose","connect","withAuthRedirect"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,iBAAmB,mCAAmC,OAAS,yBAAyB,OAAS,yBAAyB,sBAAwB,wCAAwC,kBAAoB,oCAAoC,cAAgB,gCAAgC,KAAO,uBAAuB,mBAAqB,qCAAqC,UAAY,4BAA4B,WAAa,+B,oBCAjfD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,aAAe,kCAAkC,YAAc,iCAAiC,YAAc,iCAAiC,cAAgB,mCAAmC,YAAc,iCAAiC,cAAgB,qC,yGCE7SC,EAAiB,SAACC,GAC3B,MAAyB,OAArBA,EAAMC,QAAQC,GAEV,yBAAKC,UAAWC,IAAEC,aACd,kBAAC,EAAD,CAASC,KAAMN,EAAMC,QAAQA,QAASM,KAAMP,EAAMC,QAAQO,KAAMC,KAAMT,EAAMC,QAAQQ,QAKxF,yBAAKN,UAAWC,IAAEM,eACd,kBAAC,EAAD,CAASJ,KAAMN,EAAMC,QAAQA,QAASM,KAAMP,EAAMC,QAAQO,KAAMC,KAAMT,EAAMC,QAAQQ,SAM9FE,EAAU,SAACX,GACb,OACI,0BAAMG,UAAWC,IAAEH,SACf,yBAAKE,UAAWC,IAAEQ,cACd,0BAAMT,UAAWC,IAAES,eACdb,EAAMO,MAEX,0BAAMJ,UAAWC,IAAEU,aACdd,EAAMS,OAIf,yBAAKN,UAAWC,IAAEW,aACbf,EAAMM,Q,QClBRU,EAVI,SAAChB,GAChB,IAAIiB,EAAO,aAAejB,EAAMkB,GAEhC,OACI,yBAAKf,UAAWC,IAAEe,QACd,kBAAC,IAAD,CAASjB,GAAIe,GAAOjB,EAAMO,Q,kCC8BhCa,EAAeC,YAAiB,KAsBhCC,EAAsBC,YAAU,CAACC,KAAM,qBAAjBD,EApBL,SAACvB,GACpB,OACI,0BAAMyB,SAAUzB,EAAM0B,aAChBvB,UAAWC,IAAEuB,eACf,yBAAKxB,UAAWC,IAAEwB,oBACd,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXxB,KAAM,iBACNyB,YAAY,qBACZC,KAAK,IACLC,SAAU,CAACC,IAAUf,MAEhC,yBAAKjB,UAAWC,IAAEgC,WACd,4BAAQjC,UAAWC,IAAEiC,YAArB,aAUDC,EAvDE,SAACtC,GAOd,OACI,yBAAKG,UAAWC,IAAEmC,eACd,yBAAKpC,UAAWC,IAAEoC,kBACbxC,EAAMyC,MAAMC,aAAaC,YAAYC,KAAI,SAAAC,GAAI,OAC1C,kBAACC,EAAD,CAAYvC,KAAMsC,EAAKtC,KAAMW,GAAI2B,EAAK3B,GAAI6B,IAAKF,EAAK3B,SAG5D,yBAAKf,UAAWC,IAAE4C,uBACd,yBAAK7C,UAAWC,IAAE6C,mBACbjD,EAAMyC,MAAMC,aAAaC,YAAY,GAAGO,SAASN,KAAI,SAAAO,GAAC,OAAI,kBAAC,EAAD,CAAgBlD,QAASkD,EACTJ,IAAKI,EAAEjC,SAGtF,kBAACI,EAAD,CACImB,MAAOzC,EAAMyC,MACbhB,SApBI,SAAC2B,GAGjBpD,EAAMqD,eAFK,KACF,OACsBD,EAAOE,sB,uBCD/BC,sBACXC,aAPkB,SAACf,GACnB,MAAO,CACHA,MAAOA,KAKc,CACrBY,qBAEJI,IAJWF,CAKbjB","file":"static/js/3.7b7b4088.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Messages_mainContainer__1RpqV\",\"dialogsContainer\":\"Messages_dialogsContainer__1Qll1\",\"dialog\":\"Messages_dialog__3S4ep\",\"active\":\"Messages_active__2jnaA\",\"messagesMainContainer\":\"Messages_messagesMainContainer__1tXvx\",\"messagesContainer\":\"Messages_messagesContainer__EEeQi\",\"newMessageBox\":\"Messages_newMessageBox__3v4gK\",\"logo\":\"Messages_logo__1IGc3\",\"newMessageTextArea\":\"Messages_newMessageTextArea__23yz0\",\"buttonBox\":\"Messages_buttonBox__kFAIk\",\"sendButton\":\"Messages_sendButton__2E8xm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__1cSfr\",\"messageProps\":\"MessageItem_messageProps__JE3o0\",\"messageText\":\"MessageItem_messageText__1Jdxd\",\"messageTime\":\"MessageItem_messageTime__-MAW0\",\"messageSender\":\"MessageItem_messageSender__2o-7n\",\"toMeMessage\":\"MessageItem_toMeMessage__3NZWF\",\"fromMeMessage\":\"MessageItem_fromMeMessage__12rvB\"};","import s from \"./MessageItem.module.css\";\r\nimport React from \"react\";\r\n\r\nexport const MessagesParser = (props) => {\r\n    if (props.message.to === \"Me\") {\r\n        return (\r\n            <div className={s.toMeMessage}>\r\n                <Message text={props.message.message} name={props.message.from} time={props.message.time}/>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={s.fromMeMessage}>\r\n                <Message text={props.message.message} name={props.message.from} time={props.message.time}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <span className={s.message}>\r\n            <div className={s.messageProps}>\r\n                <span className={s.messageSender}>\r\n                    {props.name}\r\n                </span>\r\n                <span className={s.messageTime}>\r\n                    {props.time}\r\n                </span>\r\n            </div>\r\n\r\n            <div className={s.messageText}>\r\n                {props.text}\r\n            </div>\r\n\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Message;","import s from \"./Messages.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/messages/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Messages.module.css\";\r\nimport {MessagesParser} from \"./Message\";\r\nimport DialogItem from \"./Dialog\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst Messages = (props) => {\r\n\r\n    let addNewMessage = (values) => {\r\n        let from = \"Me\";\r\n        let to = \"John\";\r\n        props.sendNewMessage(from, to, values.newMessageBody);\r\n    }\r\n    return (\r\n        <div className={s.mainContainer}>\r\n            <div className={s.dialogsContainer}>\r\n                {props.state.messagesPage.dialogsData.map(data => (\r\n                    <DialogItem name={data.name} id={data.id} key={data.id}/>))}\r\n            </div>\r\n\r\n            <div className={s.messagesMainContainer}>\r\n                <div className={s.messagesContainer}>\r\n                    {props.state.messagesPage.dialogsData[0].messages.map(m => <MessagesParser message={m}\r\n                                                                                               key={m.id}/>)}\r\n                </div>\r\n\r\n                <AddMessageFormRedux\r\n                    state={props.state}\r\n                    onSubmit={addNewMessage}\r\n                />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst NewMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}\r\n              className={s.newMessageBox}>\r\n            <div className={s.newMessageTextArea}>\r\n                <Field component={Textarea}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder=\"Enter your message\"\r\n                       rows=\"5\"\r\n                       validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div className={s.buttonBox}>\r\n                <button className={s.sendButton}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"addNewMessageForm\"})(NewMessageForm);\r\n\r\nexport default Messages;\r\n","import {sendNewMessage} from \"../../../redux/messagesReducer\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        sendNewMessage,\r\n    }),\r\n    withAuthRedirect,\r\n)(Messages);"],"sourceRoot":""}